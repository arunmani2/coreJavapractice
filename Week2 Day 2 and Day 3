package workout.week2.day2;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

public class RemoveDupFromList {
	/*
	 * 1. How to remove duplicates from a list? List = "A,B,C,D,A,D,E,F" 2. How to
	 * retrieve a value from a Set? Set = "1,2,3,4,5,6,7,8,9" retrieve and print
	 * only the value - 7
	 */

	public static void main(String[] args) {
		List<Character> lst = new ArrayList<Character>();
		List<Character> copylst = new ArrayList<Character>();
		lst.add('A');
		lst.add('B');
		lst.add('C');
		lst.add('D');
		lst.add('A');
		lst.add('D');
		lst.add('E');
		lst.add('F');
		//Method1
		Set<Character> uniqueSet = new LinkedHashSet<Character>(lst);
		System.err.println(uniqueSet);
		
		//Method2
		for (int i = 0; i < lst.size(); i++) {

			if (!copylst.contains(lst.get(i))) {
				copylst.add(lst.get(i));
			}
		}
		System.out.println(copylst);


	}

}

=======================================================================


package workout.week2.day2;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

/*2. How to retrieve a value from a Set?
		Set = "1,2,3,4,5,6,7,8,9"
		retrieve and print only the value - 7
*/
public class RetrievefromSet {
	public static void main(String[] args) {
		Set<Integer> ss = new LinkedHashSet<>();

		ss.add(1);
		ss.add(2);
		ss.add(3);
		ss.add(4);
		ss.add(5);
		ss.add(6);
		ss.add(7);
		ss.add(8);
		ss.add(9);

		//Method 3
		ss.forEach((eachNum) -> {
			if (eachNum == 7)
				System.out.println(eachNum);
		});

		//Method 1
		List<Integer> lst = new ArrayList<>(ss);
		for (int i = 0; i < lst.size(); i++) {
			if (lst.contains(7)) {
				System.out.println(lst.indexOf(7) + ": " + lst.get(lst.indexOf(7)));
				break;
			}
		}

		//Method 2
		for (Integer integer : ss) {
			if (integer.equals(7))
				System.out.println(integer);

		}

	}
}

============================================================================================
package workout.week2.day3;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class PrintMap {

	public static void main(String[] args) {
		HashMap<Character, Integer> map = new HashMap<Character, Integer>();
		map.put('A', 1);
		map.put('B', 2);
		map.put('C', 3);
		map.put('D', 4);
		map.put('E', 5);
		//Method 5
		map.forEach((eachKey,eachValue) -> System.out.println(eachKey+ "->" + eachValue)); //Lambda expression
		
		//Method 1
		Set<Character> set = new HashSet<>(map.keySet());
		List<Character> lst = new ArrayList<>(set);
		for (int i = 0; i < lst.size(); i++) {
			System.out.println(lst.get(i) + "->" + map.get(lst.get(i)));
		}

		//Method 2
		for (Entry<Character, Integer> entry : map.entrySet()) {
			System.out.println(entry.getKey() + "->" + entry.getValue());
		}

		//Method 3
		// Get the iterator over the HashMap
		Iterator<Map.Entry<Character, Integer>> iterator = map.entrySet().iterator();
		// Iterate over the HashMap
		while (iterator.hasNext()) {
			// Get the entry at this iteration
			Map.Entry<Character, Integer> entry = iterator.next();
			System.err.println(entry.getKey() + "->" + entry.getValue());

		}

		
		
		//Method 4
		int c=0;
		while(c<map.size())
		{
			System.err.println(lst.get(c) + "->" + map.get(lst.get(c)));
			c++;
		}
		
//iterator interface-- foreachremaining 
//iterable interface -- foreach lambda
		
	}
}
